/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Example extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6039619259271743667L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Example\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"example\",\"type\":\"string\"},{\"name\":\"test\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"valueDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Example> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Example> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Example> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Example> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Example> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Example to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Example from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Example instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Example fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence example;
  private java.time.Instant test;
  private java.time.Instant valueDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Example() {}

  /**
   * All-args constructor.
   * @param example The new value for example
   * @param test The new value for test
   * @param valueDate The new value for valueDate
   */
  public Example(java.lang.CharSequence example, java.time.Instant test, java.time.Instant valueDate) {
    this.example = example;
    this.test = test.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.valueDate = valueDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return example;
    case 1: return test;
    case 2: return valueDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: example = (java.lang.CharSequence)value$; break;
    case 1: test = (java.time.Instant)value$; break;
    case 2: valueDate = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'example' field.
   * @return The value of the 'example' field.
   */
  public java.lang.CharSequence getExample() {
    return example;
  }


  /**
   * Sets the value of the 'example' field.
   * @param value the value to set.
   */
  public void setExample(java.lang.CharSequence value) {
    this.example = value;
  }

  /**
   * Gets the value of the 'test' field.
   * @return The value of the 'test' field.
   */
  public java.time.Instant getTest() {
    return test;
  }


  /**
   * Sets the value of the 'test' field.
   * @param value the value to set.
   */
  public void setTest(java.time.Instant value) {
    this.test = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'valueDate' field.
   * @return The value of the 'valueDate' field.
   */
  public java.time.Instant getValueDate() {
    return valueDate;
  }


  /**
   * Sets the value of the 'valueDate' field.
   * @param value the value to set.
   */
  public void setValueDate(java.time.Instant value) {
    this.valueDate = value;
  }

  /**
   * Creates a new Example RecordBuilder.
   * @return A new Example RecordBuilder
   */
  public static example.avro.Example.Builder newBuilder() {
    return new example.avro.Example.Builder();
  }

  /**
   * Creates a new Example RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Example RecordBuilder
   */
  public static example.avro.Example.Builder newBuilder(example.avro.Example.Builder other) {
    if (other == null) {
      return new example.avro.Example.Builder();
    } else {
      return new example.avro.Example.Builder(other);
    }
  }

  /**
   * Creates a new Example RecordBuilder by copying an existing Example instance.
   * @param other The existing instance to copy.
   * @return A new Example RecordBuilder
   */
  public static example.avro.Example.Builder newBuilder(example.avro.Example other) {
    if (other == null) {
      return new example.avro.Example.Builder();
    } else {
      return new example.avro.Example.Builder(other);
    }
  }

  /**
   * RecordBuilder for Example instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Example>
    implements org.apache.avro.data.RecordBuilder<Example> {

    private java.lang.CharSequence example;
    private java.time.Instant test;
    private java.time.Instant valueDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.Example.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.example)) {
        this.example = data().deepCopy(fields()[0].schema(), other.example);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.test)) {
        this.test = data().deepCopy(fields()[1].schema(), other.test);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.valueDate)) {
        this.valueDate = data().deepCopy(fields()[2].schema(), other.valueDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Example instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.Example other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.example)) {
        this.example = data().deepCopy(fields()[0].schema(), other.example);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test)) {
        this.test = data().deepCopy(fields()[1].schema(), other.test);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valueDate)) {
        this.valueDate = data().deepCopy(fields()[2].schema(), other.valueDate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'example' field.
      * @return The value.
      */
    public java.lang.CharSequence getExample() {
      return example;
    }


    /**
      * Sets the value of the 'example' field.
      * @param value The value of 'example'.
      * @return This builder.
      */
    public example.avro.Example.Builder setExample(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.example = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'example' field has been set.
      * @return True if the 'example' field has been set, false otherwise.
      */
    public boolean hasExample() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'example' field.
      * @return This builder.
      */
    public example.avro.Example.Builder clearExample() {
      example = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'test' field.
      * @return The value.
      */
    public java.time.Instant getTest() {
      return test;
    }


    /**
      * Sets the value of the 'test' field.
      * @param value The value of 'test'.
      * @return This builder.
      */
    public example.avro.Example.Builder setTest(java.time.Instant value) {
      validate(fields()[1], value);
      this.test = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'test' field has been set.
      * @return True if the 'test' field has been set, false otherwise.
      */
    public boolean hasTest() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'test' field.
      * @return This builder.
      */
    public example.avro.Example.Builder clearTest() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueDate' field.
      * @return The value.
      */
    public java.time.Instant getValueDate() {
      return valueDate;
    }


    /**
      * Sets the value of the 'valueDate' field.
      * @param value The value of 'valueDate'.
      * @return This builder.
      */
    public example.avro.Example.Builder setValueDate(java.time.Instant value) {
      validate(fields()[2], value);
      this.valueDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'valueDate' field has been set.
      * @return True if the 'valueDate' field has been set, false otherwise.
      */
    public boolean hasValueDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'valueDate' field.
      * @return This builder.
      */
    public example.avro.Example.Builder clearValueDate() {
      valueDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Example build() {
      try {
        Example record = new Example();
        record.example = fieldSetFlags()[0] ? this.example : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.test = fieldSetFlags()[1] ? this.test : (java.time.Instant) defaultValue(fields()[1]);
        record.valueDate = fieldSetFlags()[2] ? this.valueDate : (java.time.Instant) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Example>
    WRITER$ = (org.apache.avro.io.DatumWriter<Example>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Example>
    READER$ = (org.apache.avro.io.DatumReader<Example>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










